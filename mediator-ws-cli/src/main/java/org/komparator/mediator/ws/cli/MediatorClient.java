package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.Holder;
import javax.xml.ws.WebServiceException;

import org.komparator.mediator.ws.*;

import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;


/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {

	
	
	private static final int CONNECTING_TIMEOUT = 5000;
	private static final int RECEIVING_TIMEOUT = 5000;
	private static final List<String> CONN_TIME_PROPS = new ArrayList<String>();
	private static final List<String> RECV_TIME_PROPS = new ArrayList<String>();
	private boolean alreadyConfigured = false;
	private static long idCounter = 0;
	
// TODO uncomment after generate-sources
     /** WS service */
     MediatorService service = null;

// TODO uncomment after generate-sources
     /** WS port (port type is the interface, port is the implementation) */
     MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
         service = new MediatorService();
         port = service.getMediatorPort();

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider
                    .getRequestContext();
            requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
           // if(!alreadyConfigured){
            	timeoutConfig(requestContext);
           // }
        }
    }
    /** Timeout configuration */
    private void timeoutConfig(Map<String, Object> requestContext){
        int connectionTimeout = CONNECTING_TIMEOUT;
        // The connection timeout property has different names in different versions of JAX-WS
        // Set them all to avoid compatibility issues
        CONN_TIME_PROPS.add("com.sun.xml.ws.connect.timeout");
        CONN_TIME_PROPS.add("com.sun.xml.internal.ws.connect.timeout");
        CONN_TIME_PROPS.add("javax.xml.ws.client.connectionTimeout");
        // Set timeout until a connection is established (unit is milliseconds; 0 means infinite)
        for (String propName : CONN_TIME_PROPS)
            requestContext.put(propName, connectionTimeout);

        int receiveTimeout = RECEIVING_TIMEOUT;
        // The receive timeout property has alternative names
        // Again, set them all to avoid compability issues
     
        RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
        RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
        RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
        // Set timeout until the response is received (unit is milliseconds; 0 means infinite)
        for (String propName : RECV_TIME_PROPS)
            requestContext.put(propName, receiveTimeout);
        alreadyConfigured = true;
    }
    


    // remote invocation methods ----------------------------------------------
    
    
     @Override
	 public void clear() {
    	 
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 port.clear();
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
     }

     @Override
	 public String ping(String arg0) {
    	 String result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.ping(arg0);
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    			 else{ break;}
    		 }
    	 }
		 return result;
	 }

     @Override
	 public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
    	 List<ItemView> result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.searchItems(descText);
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
    	 return result;
	 }

     @Override
	 public List<CartView> listCarts() {
    	 List<CartView> result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.listCarts();
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
    	 return result;		 
	 }

	 @Override
	 public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
	   	 List<ItemView> result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.getItems(productId);
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
    	 return result;		 		 
	 }

	 
	 public ShoppingResultView buyCart(String cartId, String creditCardNr) throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception{
		 long identifier = createID();
		 return buyCart2(cartId, creditCardNr, identifier);
	 }
	 
	 
	 @Override
	 public ShoppingResultView buyCart2(String cartId, String creditCardNr, Long identifier)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception {
	   	 ShoppingResultView result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.buyCart2(cartId, creditCardNr, identifier);
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
    	 return result;				 
		 
	 }

	 
	 public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
    	 long identifier = createID();
    	 addToCart2(cartId, itemId, itemQty, identifier);
	 
	 }
	 
	 @Override
	 public void addToCart2(String cartId, ItemIdView itemId, int itemQty, long identifier) throws InvalidCartId_Exception,
	 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception {
		 boolean retry = true;
    	 while(retry){
    		 try{
    			 port.addToCart2(cartId, itemId, itemQty, identifier);
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }		 
	 }

	 @Override
	 public List<ShoppingResultView> shopHistory() {
		 List<ShoppingResultView> result = null;
    	 boolean retry = true;
    	 while(retry){
    		 try{
    			 result = port.shopHistory();
    			 retry = false;
    		 } catch (WebServiceException wse) {
    			 Throwable cause = wse.getCause();
    			 if (cause != null && (cause instanceof SocketTimeoutException || cause instanceof ConnectException)) {
    				 Boolean currentVerb = verbose;
    				 verbose = false;
    				 System.out.println("Retrying...");
    				 try {
						uddiLookup();
					} catch (MediatorClientException e) {}
    				 createStub();
    				 verbose = currentVerb;
    				 
    				 continue;
    			 }
    		 }
    	 }
    	 return result;			 
	 }
	 
	 
	 
	 @Override
	 public void imAlive(){
		 port.imAlive();
	 }

	@Override
	public void updateShoppingHistory(ShoppingResultView object) {
			 port.updateShoppingHistory(object);
		 }

	@Override
	public void updateCart(String cartId, CartView cart) {
		port.updateCart(cartId, cart);
		
	}
	
	private static synchronized long createID(){
		return idCounter++;
	}
 
}